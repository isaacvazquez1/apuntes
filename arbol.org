#+title: Árbol generador de menor costo

#+options: toc:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstalias{ipython}{python}
#+latex_header: \lstset{basicstyle=\small\ttfamily, frame=single}

#+latex_header: \usepackage{bera}

#+property: header-args:ipython :exports both :cache yes :session arbol :results raw drawer

* Problema

Supongamos que a cada arista de la gráfica completa \(K_{n}\) se le
asigna un valor ("peso"). Si a cada subgráfica le asignamos un peso
igual a la suma de los pesos de sus aristas, consieraremos el
problema de encontrar el árbol generador de menor peso.

* Algoritmo de Kruskal

El algoritmo de Kruskal consiste en escoger sucesivamente las aristas
más baratascon tal de que no formen ciclos con las aristas escogidas
previamente. e una gráfica con \(n\) vértices se puede demostrar que
tal algoritmo termina cuando hayamos escogido \(n-1\) aristas, y que
el árbol así construido es tal que tiene costo mínimo.

* Implementación en Python

Primeramentente vamos a importar las bibliotecas que vamos a utilizar.

#+begin_src ipython
import networkx as nx
import matplotlib.pyplot as plt
from random import random as random
from scipy.spatial.distance import euclidean
#+end_src

#+RESULTS[2a253d47c089a054eb3655b60d8ccea8fad581c9]:
:results:
# Out[1]:
:end:

A continuación definiremos una gráfica aleatoria con diez vértices.
#+begin_src ipython
g=nx.gnp_random_graph(10,0.2)
#+end_src

#+RESULTS[6cb25f08ff5c48547b3f4dfee8e011fbbf4547c2]:
:results:
# Out[8]:
:end:

Veremos si nuestra gráfica es un bosque.
#+begin_src ipython
nx.is_forest(g), nx.is_connected(g)
#+end_src

#+RESULTS[e7d1dbb3a296c52111081a2873e11b0c5e1bcb99]:
:results:
# Out[9]:
: (True, False)
:end:

Dibujaremos la gráfica ya que tiene las características buscadas.
#+begin_src ipython
nx.draw(g, with_labels=True)
#+end_src

#+RESULTS[7a5a44e71604efbb3ac02fd3863ef7628a5be23d]:
:results:
# Out[10]:
[[file:./obipy-resources/2226XIB.png]]
:end:

Calcularemos las componentes conexa de la gráfica anterior
#+begin_src ipython
list(nx.connected_components(g))
#+end_src

#+RESULTS[fd43bac86ab4e6adb6ece858cb2c922a37acadb0]:
:results:
# Out[11]:
: [{0, 1, 2, 3, 4, 6, 7, 8}, {5}, {9}]
:end:

Veamos la componente que contiene al vértice 0.

#+begin_src ipython
nx.node_connected_component(g,0)
#+end_src

#+RESULTS[84e09df2d15057ce755c484d0b3c164d992f950e]:
:results:
# Out[12]:
: {0, 1, 2, 3, 4, 6, 7, 8}
:end:

Dibujaremos ahora un árbol elegido aleatoriamente
#+begin_src ipython
t=nx.random_tree(10)
nx.draw(t,with_labels=True)
#+end_src

#+RESULTS[7198899532f119d85be7a7b4da483cf334eb4b66]:
:results:
# Out[13]:
[[file:./obipy-resources/2226kSH.png]]
:end:

* Puntos en el plano
  Si tenemos dos listas de números de tamaño =n=, podemos dibujar n
  puntos en el plano tomando las coordenadas =x= de la primera lista y
  las coordenadas =y= de la segunda.

#+begin_src ipython
plt.plot([1,1,2],[1,3.5,5],'bx')
plt.axis([0,3,0,6])
plt.show()
#+end_src

#+RESULTS[c5570885a28cf3567f11db05e21a0cad6b6738dd]:
:results:
# Out[2]:
[[file:./obipy-resources/1868_Fn.png]]
:end:

Definamos una función que dibuje =n= puntos en el plano
aleatoriamente.
#+begin_src ipython
def punto_en_el_plano(n):
    listax=[]
    listay=[]
    for i in range(n):
        listax.append(random())
        listay.append(random())
    return listax, listay
#+end_src

#+RESULTS[e98bfc6e20c6929aee4a045f6fea5bc867673d22]:
:results:
# Out[4]:
:end:

#+begin_src ipython
puntos=punto_en_el_plano(50)
puntos
#+end_src

#+RESULTS[06661c542368384f97472f86b0c3e4f2aeef5ecf]:
:results:
# Out[5]:
#+BEGIN_EXAMPLE
  ([0.38299084409712447,
  0.20118186717759978,
  0.4606707615555261,
  0.9799566997462898,
  0.24389291129326152,
  0.05648917412859322,
  0.13897865965381018,
  0.5229675574320239,
  0.8792292533956183,
  0.7719480299095235,
  0.21650610846983365,
  0.6483016972960262,
  0.060703724120815816,
  0.9145001787478181,
  0.627099076468679,
  0.6411978924996936,
  0.29287292967654344,
  0.9385794176058497,
  0.20001288206367895,
  0.8757769016927016,
  0.6712733791624409,
  0.9715780227360912,
  0.32184993775719295,
  0.3713502014618325,
  0.43516857476622284,
  0.28663401804777733,
  0.6485853015767333,
  0.6376465206334283,
  0.9459886038389888,
  0.7694769702493587,
  0.4156470303497536,
  0.6344266047526328,
  0.7557415068860754,
  0.8178703299844712,
  0.7125680141037501,
  0.7026658021120696,
  0.04573646152677924,
  0.04620831452335861,
  0.7251724184872034,
  0.22139396449647586,
  0.915823456690333,
  0.4297354597113696,
  0.16024830043181026,
  0.9496964864041573,
  0.2784431372058438,
  0.5776134470670782,
  0.11781174865266453,
  0.5620268615130747,
  0.04078415346590525,
  0.6266233376737413],
  [0.8999515072419905,
  0.09293321327587789,
  0.07067137117019762,
  0.8380743398494105,
  0.5241850823575496,
  0.19966005231665374,
  0.17310948817109095,
  0.37222766424154397,
  0.2479600482037917,
  0.2501291017601316,
  0.23662256906328516,
  0.35619707218018115,
  0.16666663080154698,
  0.35108774970788814,
  0.031813662606428705,
  0.6273648696692274,
  0.47883880459670314,
  0.4031240120758506,
  0.42483666801764197,
  0.22231452167964416,
  0.22886615289414358,
  0.5956477228840844,
  0.44772530351383566,
  0.8871920722732503,
  0.7116471376422563,
  0.9904214217467862,
  0.2771752098614929,
  0.3434962502261365,
  0.23780948624024612,
  0.9352179206026026,
  0.8055218710840905,
  0.3933311880435627,
  0.4461775921505351,
  0.6593326830650039,
  0.6920640715089798,
  0.7938218039294385,
  0.912614842190432,
  0.16832538758598037,
  0.3843985518368316,
  0.36557027627418504,
  0.2870048915316128,
  0.6867188211291774,
  0.3574468228027141,
  0.6285255652768982,
  0.31969897232768973,
  0.2839623176800682,
  0.09943232961096715,
  0.6817000131006329,
  0.7253340917290484,
  0.6113273881238612])
#+END_EXAMPLE
:end:

#+begin_src ipython
plt.plot(puntos[0],puntos[1],'ro')
plt.show()
#+end_src

#+RESULTS[9fe2cc2cd1b7f713fed951c99ede67af8a392843]:
:results:
# Out[6]:
[[file:./obipy-resources/1868MQt.png]]
:end:
#+begin_src ipython
def dibujo_puntos(listax, listay):
    plt.plot(listax,listay,'bo')
    plt.axis([-0.1,1.1,-0.1,1.1])
    plt.gca().set_aspect('equal')
    plt.show()
#+end_src

#+RESULTS[edd14e0a3f27ce7513e5c7e73d4368dc40947bcb]:
:results:
# Out[7]:
:end:

 #+begin_src ipython
dibujo_puntos(*puntos)
 #+end_src

 #+RESULTS[274d1e4a2e4c1e9a72c9f464a39ff8637dd52977]:
 :results:
 # Out[8]:
 [[file:./obipy-resources/1868Zaz.png]]
 :end:

* Distancia euclidiana
#+begin_src ipython
a = (0,0)
b = (3,5)
euclidean(a,b)
#+end_src

#+RESULTS[5dd3572395e58f4978f7e3203a053854c229ac91]:
:results:
# Out[9]:
: 5.830951894845301
:end:

* Gráfica con pesos

En =networkx= se pueden considerar gráficas donde cada arista tiene un
peso. Por ejemplo:
#+begin_src ipython
g=nx.Graph()
g.add_nodes_from(["a","b","c"])
g.add_weighted_edges_from([("a","b",2),("a","c",0.5)])
position=nx.spring_layout(g)

nx.draw_networkx_edge_labels(g,pos=position)
nx.draw(g,with_labels=True,pos=position)
#+end_src

#+RESULTS:
:results:
# Out[11]:
[[file:./obipy-resources/1868LkC.png]]
:end:

Definimos ahora una función que, dadas dos listas de números produzca
un gráfica con pesos donde los vértices sean los puntos y el peso
entre los mismos es la distancia euclidiana entre ellos.

#+begin_src ipython
def grafica_euclidiana(listax, listay):
    G = nx.Graph()
    n = len(listax)
    vertices = []
    for i in range (n):
        vertices.append((listax[i], listay[i]))
    aristas = []
    for i in range(n):
        for j in range(i+1, n):
            u = vertices[i]
            v = vertices[j]
            aristas.append((u, v, euclidean(u, v)))
    G.add_nodes_from(vertices)
    G.add_weighted_edges_from(aristas)
    return G
#+end_src

#+RESULTS[2379ea29e3c76e2af7e95df8e7a4c5abf5993d7c]:
:results:
# Out[18]:
:end:
 #+begin_src ipython
g = grafica_euclidiana(*puntos)
 #+end_src

 #+RESULTS:
 :results:
 # Out[20]:
 :end:

#+begin_src ipython
def arbol_menor_costo(G):
    T = nx.Graph()
    T.add_nodes_from(G)
    aristas = list(G.edges(data = True))
    aristas = sorted(aristas, key = lambda e: -e[2]['weight'])
    while len(T.edges()) < len(G)-1:
        e = aristas.pop()
        if not (e[0] in nx.node_connected_component(T, e[1])):
            T.add_edge(e[0], e[1])
    return T
#+end_src

#+RESULTS[3469ad1c20ed62eb1ba9496143efc7edbdac523c]:
:results:
# Out[21]:
:end:
 
#+begin_src ipython
plt.figure(figsize=(10,10))

t = arbol_menor_costo(g)
nx.draw(t)
#+end_src

#+RESULTS:
:results:
# Out[27]:
[[file:./obipy-resources/1868YuI.png]]
:end:


#+begin_src ipython
plt.figure(figsize=(10,10))

for v in t.nodes():
    plt.plot(v[0], v[1], 'ro')

for e in t.edges():
    p1 = e[0]
    p2 = e[1]
    plt.plot([p1[0], p2[0]], [p1[1], p2[1]], color='blue')

plt.axis([-0.1,1.1,-0.1,1.1])
plt.gca().set_aspect('equal')

plt.show()
           
#+end_src

#+RESULTS:
:results:
# Out[33]:
[[file:./obipy-resources/1868l4O.png]]
:end:


# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
